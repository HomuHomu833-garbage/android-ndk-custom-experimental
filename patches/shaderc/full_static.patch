diff --git a/BUILD.gn b/BUILD.gn
index 9fb5fb7..ad9eada 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -64,9 +64,6 @@ source_set("shaderc_util_sources") {
 
 config("shaderc_public") {
   include_dirs = [ "libshaderc/include" ]
-  if (is_component_build) {
-    defines = [ "SHADERC_SHAREDLIB" ]
-  }
 }
 
 component("libshaderc") {
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 633c244..8d0263b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -111,23 +111,6 @@ add_custom_target(add-copyright
   WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
   COMMENT "Add copyright")
 
-if(MSVC)
-  option(SHADERC_ENABLE_SHARED_CRT
-          "Use the shared CRT instead of the static CRT"
-          ${SHADERC_ENABLE_SHARED_CRT})
-  if (NOT SHADERC_ENABLE_SHARED_CRT)
-    # Link executables statically by replacing /MD with /MT everywhere.
-    foreach(flag_var
-        CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
-        CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
-      if(${flag_var} MATCHES "/MD")
-        string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
-      endif(${flag_var} MATCHES "/MD")
-    endforeach(flag_var)
-  endif(NOT SHADERC_ENABLE_SHARED_CRT)
-endif(MSVC)
-
-
 # Configure subdirectories.
 # We depend on these for later projects, so they should come first.
 add_subdirectory(third_party)
@@ -167,6 +150,5 @@ function(define_pkg_config_file NAME LIBS)
   endif()
 endfunction()
 
-define_pkg_config_file(shaderc -lshaderc_shared)
 define_pkg_config_file(shaderc_static "-lshaderc ${EXTRA_STATIC_PKGCONFIG_LIBS} -lshaderc_util")
 define_pkg_config_file(shaderc_combined -lshaderc_combined)
diff --git a/android_test/Android.mk b/android_test/Android.mk
index 31ad381..c7f8343 100644
--- a/android_test/Android.mk
+++ b/android_test/Android.mk
@@ -20,7 +20,6 @@ LOCAL_SRC_FILES:=test.cpp
 LOCAL_MODULE:=shaderc_test
 LOCAL_LDLIBS:=-landroid
 LOCAL_STATIC_LIBRARIES=shaderc android_native_app_glue
-include $(BUILD_SHARED_LIBRARY)
 
 include $(LOCAL_PATH)/../Android.mk
 $(call import-module,android/native_app_glue)
diff --git a/cmake/setup_build.cmake b/cmake/setup_build.cmake
index 994de9f..31ab5d2 100644
--- a/cmake/setup_build.cmake
+++ b/cmake/setup_build.cmake
@@ -31,14 +31,6 @@ if (NOT ASCIIDOCTOR_EXE)
           " generated")
 endif()
 
-# On Windows, CMake by default compiles with the shared CRT.
-# Ensure that gmock compiles the same, otherwise failures will occur.
-if(WIN32)
-  # TODO(awoloszyn): Once we support selecting CRT versions,
-  # make sure this matches correctly.
-  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-endif(WIN32)
-
 if (ANDROID)
 # For android let's preemptively find the correct packages so that
 # child projects (glslang, googletest) do not fail to find them.
diff --git a/cmake/utils.cmake b/cmake/utils.cmake
index d64757d..e53c487 100644
--- a/cmake/utils.cmake
+++ b/cmake/utils.cmake
@@ -41,14 +41,12 @@ function(shaderc_default_c_compile_options TARGET)
       # requires clang to be built with compiler-rt.
       target_link_libraries(${TARGET} PRIVATE --coverage)
     endif()
-    if (NOT SHADERC_ENABLE_SHARED_CRT)
-      if (WIN32)
-        # For MinGW cross compile, statically link to the libgcc runtime.
-        # But it still depends on MSVCRT.dll.
-        set_target_properties(${TARGET} PROPERTIES
-          LINK_FLAGS "-static -static-libgcc")
-      endif(WIN32)
-    endif(NOT SHADERC_ENABLE_SHARED_CRT)
+    if (WIN32)
+      # For MinGW cross compile, statically link to the libgcc runtime.
+      # But it still depends on MSVCRT.dll.
+      set_target_properties(${TARGET} PROPERTIES
+        LINK_FLAGS "-static -static-libgcc")
+    endif(WIN32)
   else()
     # disable warning C4800: 'int' : forcing value to bool 'true' or 'false'
     # (performance warning)
@@ -60,14 +58,12 @@ function(shaderc_default_compile_options TARGET)
   shaderc_default_c_compile_options(${TARGET})
   if (NOT "${MSVC}")
     target_compile_options(${TARGET} PRIVATE -std=c++11)
-    if (NOT SHADERC_ENABLE_SHARED_CRT)
-      if (WIN32)
-        # For MinGW cross compile, statically link to the C++ runtime.
-        # But it still depends on MSVCRT.dll.
-        set_target_properties(${TARGET} PROPERTIES
-          LINK_FLAGS "-static -static-libgcc -static-libstdc++")
-      endif(WIN32)
-    endif(NOT SHADERC_ENABLE_SHARED_CRT)
+    if (WIN32)
+      # For MinGW cross compile, statically link to the libgcc runtime.
+      # But it still depends on MSVCRT.dll.
+      set_target_properties(${TARGET} PROPERTIES
+        LINK_FLAGS "-static -static-libgcc -static-libstdc++")
+    endif(WIN32)
   endif()
 endfunction(shaderc_default_compile_options)
 
diff --git a/libshaderc/CMakeLists.txt b/libshaderc/CMakeLists.txt
index 2cced9e..c78c699 100644
--- a/libshaderc/CMakeLists.txt
+++ b/libshaderc/CMakeLists.txt
@@ -31,18 +31,6 @@ target_include_directories(shaderc
     PRIVATE ${glslang_SOURCE_DIR}
             ${SPIRV-Headers_SOURCE_DIR}/include)
 
-add_library(shaderc_shared SHARED ${SHADERC_SOURCES})
-shaderc_default_compile_options(shaderc_shared)
-target_include_directories(shaderc_shared
-    PUBLIC include
-    PRIVATE ${glslang_SOURCE_DIR}
-            ${SPIRV-Headers_SOURCE_DIR}/include)
-target_compile_definitions(shaderc_shared
-    PRIVATE SHADERC_IMPLEMENTATION
-    PUBLIC SHADERC_SHAREDLIB
-)
-set_target_properties(shaderc_shared PROPERTIES SOVERSION 1)
-
 if(SHADERC_ENABLE_INSTALL)
   install(
     FILES
@@ -53,12 +41,6 @@ if(SHADERC_ENABLE_INSTALL)
       include/shaderc/shaderc.hpp
     DESTINATION
       ${CMAKE_INSTALL_INCLUDEDIR}/shaderc)
-
-  install(TARGETS shaderc shaderc_shared
-    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
-    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
-    BUNDLE DESTINATION ${CMAKE_INSTALL_BINDIR}
-    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
 endif(SHADERC_ENABLE_INSTALL)
 
 find_package(Threads)
@@ -70,7 +52,6 @@ set(SHADERC_LIBS
 )
 
 target_link_libraries(shaderc PRIVATE ${SHADERC_LIBS})
-target_link_libraries(shaderc_shared PRIVATE ${SHADERC_LIBS})
 
 shaderc_add_tests(
   TEST_PREFIX shaderc
@@ -83,17 +64,6 @@ shaderc_add_tests(
     shaderc_cpp
     shaderc_private)
 
-shaderc_add_tests(
-  TEST_PREFIX shaderc_shared
-  LINK_LIBS shaderc_shared SPIRV-Tools
-  INCLUDE_DIRS include ${shaderc_SOURCE_DIR}/libshaderc_util/include ${glslang_SOURCE_DIR}
-               ${spirv-tools_SOURCE_DIR}/include
-               ${SPIRV-Headers_SOURCE_DIR}/include
-  TEST_NAMES
-    shaderc
-    shaderc_cpp
-    shaderc_private)
-
 shaderc_combine_static_lib(shaderc_combined shaderc)
 
 if(SHADERC_ENABLE_INSTALL)
diff --git a/libshaderc/include/shaderc/visibility.h b/libshaderc/include/shaderc/visibility.h
index 88ec151..a6aecd2 100644
--- a/libshaderc/include/shaderc/visibility.h
+++ b/libshaderc/include/shaderc/visibility.h
@@ -15,23 +15,6 @@
 #ifndef SHADERC_VISIBILITY_H_
 #define SHADERC_VISIBILITY_H_
 
-// SHADERC_EXPORT tags symbol that will be exposed by the shared libraries.
-#if defined(SHADERC_SHAREDLIB)
-#if defined(_WIN32)
-#if defined(SHADERC_IMPLEMENTATION)
-#define SHADERC_EXPORT __declspec(dllexport)
-#else
-#define SHADERC_EXPORT __declspec(dllimport)
-#endif
-#else
-#if defined(SHADERC_IMPLEMENTATION)
-#define SHADERC_EXPORT __attribute__((visibility("default")))
-#else
 #define SHADERC_EXPORT
-#endif
-#endif
-#else
-#define SHADERC_EXPORT
-#endif
 
 #endif  // SHADERC_VISIBILITY_H_
