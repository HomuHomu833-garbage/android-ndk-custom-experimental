name: Make NDK APE
run-name: Make NDK-r${{inputs.ndk_version}} with llvm-${{inputs.llvm_version}}-ape
on:
  workflow_dispatch:
    inputs:
      ndk_version:
        description: "NDK Release version:"
        default: '28'
        required: true
        type: string
      llvm_version:
        description: "LLVM Release version:"
        default: '19.1.7'
        required: true
        type: string

jobs:
  make:
    name: Make NDK APE
    runs-on: ubuntu-latest
    steps:
      - name: Get NDK and LLVM
        run: |
          curl -LkSs https://dl.google.com/android/repository/android-ndk-r${{inputs.ndk_version}}-linux.zip >ndk.zip && unzip -q ndk.zip
          curl -LkSs https://github.com/MobilePorting/android-ndk-cosmo-ape/releases/download/llvm-${{inputs.llvm_version}}/clang+clang-tools-extra+lld-${{inputs.llvm_version}}-ape.tar.xz | tar -xJf -

      - name: Make NDK APE
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.ndk_version}}"
          HOST_TOOLCHAIN="${PWD}/clang+clang-tools-extra+lld-${{inputs.llvm_version}}-ape"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64"

          find "${NDK_TOOLCHAIN}/bin" -type f | while IFS= read -r file; do
              bname="$(basename "${file}")"
              if [ -f "${HOST_TOOLCHAIN}/bin/${bname}" ] && file "${file}" | grep -q 'ELF'; then
                  echo "Replacing ${bname}"
                  cp "${HOST_TOOLCHAIN}/bin/${bname}" "${file}"
              elif file "${file}" | grep -q 'Bourne-Again shell script'; then
                  echo "Replacing SheBang ${bname}"
                  sed -i 's,#!/usr/bin/env bash,#!/usr/bin/env sh,' "${file}"
              fi

              if file "${file}" | grep -q 'ELF'; then
                  echo "Removing ${bname}"
                  rm ${file}
              fi
          done

          ## Fix: ERROR: Unknown host CPU architecture: aarch64
          sed -i 's/arm64)/arm64|aarch64)/' "${NDK}/build/tools/ndk_bin_common.sh"

          ## Remove unused resource
          rm -rf "${NDK_TOOLCHAIN}/python3"
          rm -rf "${NDK_TOOLCHAIN}/musl"
          rm -rf "${NDK}/prebuilt/*asm"
          find "${NDK_TOOLCHAIN}/lib" -maxdepth 1 -mindepth 1 -not -name clang -exec rm -rf {} \;
          find "${NDK_TOOLCHAIN}" -maxdepth 5 -path "*/lib/clang/[0-9][0-9]/lib/*" -not -name linux -exec rm -rf {} \;

          curl -LkSs https://cosmo.zip/pub/cosmos/bin/make > "${NDK}/prebuilt/linux-x86_64/bin/make" && chmod +x "${NDK}/prebuilt/linux-x86_64/bin/make"
          mkdir -p "${NDK_TOOLCHAIN}/python3/bin"
          curl -LkSs https://cosmo.zip/pub/cosmos/bin/python >"${NDK_TOOLCHAIN}/python3/bin/python3" && chmod +x "${NDK_TOOLCHAIN}/python3/bin/python3"

          mv ${NDK}/prebuilt/linux-x86_64 ${NDK}/prebuilt/cosmo-universal
          mv ${NDK}/toolchains/llvm/prebuilt/linux-x86_64 ${NDK}/toolchains/llvm/prebuilt/cosmo-universal

          rm -rf ${NDK}/shader-tools # TODO: maybe build?

      - name: Archive
        run: tar -c android-ndk-r${{inputs.ndk_version}} >android-ndk-r${{inputs.ndk_version}}-unfixed.tar

      - uses: actions/upload-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}-unfixed
          path: android-ndk-r${{inputs.ndk_version}}-unfixed.tar

  windows_fix:
    needs: make
    name: Windows Fix
    runs-on: windows-latest
    steps:
      - uses: milliewalky/setup-7-zip@v2

      - name: Get Unfixed NDK
        uses: actions/download-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}-unfixed
          merge-multiple: true

      - name: Extract Unfixed NDK
        run: 7z x android-ndk-r${{inputs.ndk_version}}-unfixed.tar -aoa

      - name: Fix Links
        shell: pwsh
        run: |
          function Get-FileType {
              param ([string]$FilePath)
              $fileExePath = "C:\Program Files\Git\usr\bin\file.exe"
              return & "$fileExePath" $FilePath
          }

          $NDK = "$PWD/android-ndk-r${{inputs.ndk_version}}"
          $NDK_TOOLCHAIN = "$NDK/toolchains/llvm/prebuilt/cosmo-universal"

          foreach ($file in Get-ChildItem -Path "$NDK_TOOLCHAIN\bin" -File) {
              $bname = $file.Name
              $fileType = Get-FileType $file.FullName

              if ($fileType -match "symbolic link to `(.*`)") {
                  $targetFile = $matches[1].Trim()

                  Write-Host "Hard linking $bname"
                  Remove-Item $file.FullName -Force

                  $targetPath = "$NDK_TOOLCHAIN\bin\$targetFile"
                  if (Test-Path "$targetPath") {
                      Copy-Item -Path "$targetPath" -Destination $file.FullName -Force
                  } else {
                      Write-Host "$targetFile does not exist skip"
                  }
              }
          }

          foreach ($file in Get-ChildItem -Path "$NDK_TOOLCHAIN\bin" -File) {
              $bname = $file.Name
              $fileType = Get-FileType $file.FullName

              if ($fileType -match "DOS/MBR boot sector") {
                  Write-Host "Renaming $bname"
                  Rename-Item -Path $file.FullName -NewName "$($file.Name).exe"
              }
              elseif ($fileType -match "a sh script") {
                  Write-Host "Replacing UNIX file $bname"
                  Remove-Item $file.FullName -Force
                  Invoke-WebRequest -Uri "https://raw.githubusercontent.com/MobilePorting/android-ndk-cosmo-ape/main/windows-extra/$($file.Name)" -OutFile "$($file.FullName)"
                  Invoke-WebRequest -Uri "https://raw.githubusercontent.com/MobilePorting/android-ndk-cosmo-ape/main/windows-extra/$($file.Name).cmd" -OutFile "$($file.FullName).cmd"
              }
          }

          Write-Host "Running Windows Exclusive Fixes..."
          Remove-Item $NDK_TOOLCHAIN\bin\clang-19.exe
          Remove-Item $NDK_TOOLCHAIN\bin\ld64.lld.exe
          Remove-Item $NDK_TOOLCHAIN\bin\lld-link.exe
          Remove-Item $NDK_TOOLCHAIN\bin\lld.exe
          Rename-Item -Path "$NDK\prebuilt\cosmo-universal\bin\make" -NewName "$NDK\prebuilt\cosmo-universal\bin\make.exe"
          Rename-Item -Path "$NDK_TOOLCHAIN\python3\bin\python3" -NewName "$NDK_TOOLCHAIN\python3\bin\python3.exe"
          Copy-Item -Path "$NDK_TOOLCHAIN\bin\clang.exe" -Destination "$NDK_TOOLCHAIN\bin\clang-cl.exe" -Force
          cd ${NDK}/toolchains/llvm/prebuilt
          Rename-Item -Path "cosmo-universal" -NewName "windows-x86_64"
          cd ${NDK}/prebuilt
          Rename-Item -Path "cosmo-universal" -NewName "windows-x86_64"

      - name: Archive Fixed NDK
        run: 7z a -snl -t7z -mx=9 -m0=LZMA2 -md=256m -mfb=273 -mtc=on -mmt=on android-ndk-r${{inputs.ndk_version}}-windows.7z android-ndk-r${{inputs.ndk_version}}

      - name: Upload Fixed NDK
        uses: actions/upload-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}-windows
          path: android-ndk-r${{inputs.ndk_version}}-windows.7z

  unix_fix:
    needs: make
    name: Unix Fix
    runs-on: ubuntu-latest
    steps:
      - name: Get Unfixed NDK
        uses: actions/download-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}-unfixed
          merge-multiple: true

      - name: Extract Unfixed NDK
        run: tar -xf android-ndk-r${{inputs.ndk_version}}-unfixed.tar

      - name: Fix Links
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.ndk_version}}"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/cosmo-universal"

          cd ${NDK}/toolchains/llvm/prebuilt

          ln -s cosmo-universal linux-x86_64
          ln -s cosmo-universal linux-arm64
          ln -s cosmo-universal darwin-x86_64
          ln -s cosmo-universal darwin-arm64

          cd ${NDK}/prebuilt

          ln -s cosmo-universal linux-x86_64
          ln -s cosmo-universal linux-arm64
          ln -s cosmo-universal darwin-x86_64
          ln -s cosmo-universal darwin-arm64

      - name: Archive Fixed NDK
        run: tar -cf - android-ndk-r${{inputs.ndk_version}} | xz -T0 -9e --lzma2=dict=256MiB > android-ndk-r${{inputs.ndk_version}}-unix.tar.xz

      - name: Upload Fixed NDK
        uses: actions/upload-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}-unix
          path: android-ndk-r${{inputs.ndk_version}}-unix.tar.xz

  release:
    needs: [unix_fix, windows_fix]
    name: Release
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    steps:
    - uses: geekyeggo/delete-artifact@v5.1.0
      with:
        name: android-ndk-r${{inputs.ndk_version}}-unfixed

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Release
      uses: ncipollo/release-action@v1.15.0
      with:
        tag: "r${{inputs.ndk_version}}"
        artifacts: android-ndk-r${{inputs.ndk_version}}*
        allowUpdates: true
        replacesArtifacts: true
        body: |
          [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
