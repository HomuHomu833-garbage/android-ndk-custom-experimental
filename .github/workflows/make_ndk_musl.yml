name: Make NDK (musl libc)
run-name: Make NDK-r${{inputs.ndk_version}} with llvm-${{inputs.llvm_version}}-musl
on:
  workflow_dispatch:
    inputs:
      ndk_version:
        description: "NDK Release version:"
        default: '29-beta1'
        required: true
        type: string
      llvm_version:
        description: "LLVM Release version:"
        default: '20.1.1'
        required: true
        type: string

jobs:
  make:
    name: Make NDK musl
    runs-on: ubuntu-latest
    env:
      ZIG_TARGET: ${{matrix.target}}
    strategy:
      fail-fast: true
      matrix:
        target: [aarch64-linux-musl, arm-linux-musleabihf, x86_64-linux-musl, x86-linux-musl, riscv64-linux-musl, riscv32-linux-musl]
    steps:
      - name: Setup Zig
        uses: mlugg/setup-zig@v1.2.1
        with:
          version: "0.15.0-dev.77+aa8aa6625"
          use-cache: false

      - name: Setup Zig Toolchain
        run: git clone https://github.com/zongou/zig-as-llvm

      - name: Install Dependencies
        run: |
          sudo add-apt-repository ppa:deadsnakes/ppa -y
          sudo apt install ninja-build qemu-user-static python3.12 \
              build-essential libssl-dev libbz2-dev libdb-dev libgdbm-dev \
              liblzma-dev libsqlite3-dev libreadline-dev libncurses5-dev \
              libncursesw5-dev tk-dev uuid-dev libffi-dev \
              libxml2-dev libxmlsec1-dev zlib1g-dev libcrypt-dev \
              libexpat1-dev libc6-dev-i386 libbluetooth-dev \
              libopus-dev libogg-dev libvorbis-dev libpulse-dev \
              libdb5.3-dev libnsl-dev gawk

      - name: Build Extra Dependencies
        run: |
          TOOLCHAIN=${PWD}/zig-as-llvm

          cd /home/runner
          # GNU Make
          curl -LkSs https://ftp.gnu.org/gnu/make/make-4.3.tar.gz | gzip -d | tar -x
          cd make-4.3
          ./configure \
          --prefix="${PWD}/build" \
          --build=${{ matrix.target }} \
          --host=x86_64-linux-gnu \
          CC=${TOOLCHAIN}/bin/cc \
          CXX=${TOOLCHAIN}/bin/c++ \
          LD=${TOOLCHAIN}/bin/ld \
          OBJCOPY=${TOOLCHAIN}/bin/objcopy \
          AR=${TOOLCHAIN}/bin/ar \
          STRIP=${TOOLCHAIN}/bin/strip \
          CFLAGS="-static" \
          CXXFLAGS="-static" \
          LDFLAGS="-static"
          make -j"$(nproc --all)" install

          cd /home/runner
          # YASM
          curl -LkSs http://deb.debian.org/debian/pool/main/y/yasm/yasm_1.3.0.orig.tar.gz | gzip -d | tar -x
          cd yasm-1.3.0
          cd config
          wget -O config.sub "http://git.savannah.gnu.org/cgit/config.git/plain/config.sub"
          wget -O config.guess "http://git.savannah.gnu.org/cgit/config.git/plain/config.guess"
          cd ..
          ./configure \
          --prefix="${PWD}/build" \
          --build=${{ matrix.target }} \
          --host=x86_64-linux-gnu \
          --disable-nls \
          CC=${TOOLCHAIN}/bin/cc \
          CXX=${TOOLCHAIN}/bin/c++ \
          LD=${TOOLCHAIN}/bin/ld \
          OBJCOPY=${TOOLCHAIN}/bin/objcopy \
          AR=${TOOLCHAIN}/bin/ar \
          STRIP=${TOOLCHAIN}/bin/strip \
          CFLAGS="-static -fno-strict-overflow -fwrapv -Wno-error=date-time" \
          CXXFLAGS="-static -fno-strict-overflow -fwrapv -Wno-error=date-time" \
          LDFLAGS="-static"
          make -j"$(nproc --all)" install

          cd /home/runner
          # Python
          curl -LkSs https://www.python.org/ftp/python/3.12.3/Python-3.12.3.tar.xz | xz -d | tar -x
          cd Python-3.12.3
          sed -i '/case $host_cpu/,/esac/ c MODULE_BUILDTYPE=static' configure
          sed -i '/Linux\*|GNU\*) .*/d' configure
          sed -i '/Linux\*|GNU\*|QNX\*|VxWorks\*|Haiku\*)/,/;;/d' configure
          sed -i '/#include "pycore_pathconfig.h"/a \
          PyObject* _Py_Get_Getpath_CodeObject(void) { Py_RETURN_NONE; }' Modules/getpath_noop.c
          export CC=${TOOLCHAIN}/bin/cc
          export CXX=${TOOLCHAIN}/bin/c++
          export LD=${TOOLCHAIN}/bin/ld
          export OBJCOPY=${TOOLCHAIN}/bin/objcopy
          export AR=${TOOLCHAIN}/bin/ar
          export STRIP=${TOOLCHAIN}/bin/strip
          export CFLAGS="-static -Wno-error=date-time"
          export CXXFLAGS="-static -Wno-error=date-time"
          export LDFLAGS="-static"
          export ac_cv_func_dlopen=no
          export ac_cv_file__dev_ptmx=no
          export ac_cv_file__dev_ptc=no
          ./configure --prefix="${PWD}/build" \
          --build=${{ matrix.target }} \
          --host=${{ matrix.target }} \
          --target=${{ matrix.target }} \
          --disable-shared \
          --disable-ipv6 \
          --enable-optimizations \
          --with-pkg-config=no \
          --with-readline=no \
          --with-ensurepip=no \
          --with-openssl-rpath=no \
          --with-ssl-default-suites=python
          make -j"$(nproc --all)" build_all || echo "WARNING: issue in building python for ${{ matrix.target }}"
          make install

          # Manually strip binaries
          for file in \
              /home/runner/make-4.3/build/bin/make \
              /home/runner/yasm-1.3.0/build/bin/yasm \
              /home/runner/yasm-1.3.0/build/bin/ytasm \
              /home/runner/yasm-1.3.0/build/bin/vsyasm \
              /home/runner/Python-3.12.3/python
          do
              tmpfile="$(dirname "$file")/$(mktemp --dry-run .strip.XXXX)"
              if $OBJCOPY --strip-all "$file" "$tmpfile"; then
                  mv "$tmpfile" "$file"
              else
                  echo "WARNING: unable to strip $file"
              fi
          done

      - name: Get NDK and LLVM
        run: |
          curl -LkSs https://dl.google.com/android/repository/android-ndk-r${{inputs.ndk_version}}-linux.zip >ndk.zip && unzip -q ndk.zip
          curl -LkSs https://github.com/MobilePorting/android-ndk-custom/releases/download/llvm-${{inputs.llvm_version}}/clang+clang-tools-extra+lld-${{inputs.llvm_version}}-${{matrix.target}}.tar.xz | tar -xJf -

      - name: Make NDK musl
        run: |
          NDK="${PWD}/android-ndk-r${{inputs.ndk_version}}"
          HOST_TOOLCHAIN="${PWD}/clang+clang-tools-extra+lld-${{inputs.llvm_version}}-${{matrix.target}}"
          NDK_TOOLCHAIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64"

          find "${NDK_TOOLCHAIN}/bin" -type f | while IFS= read -r file; do
              bname="$(basename "${file}")"
              if [ -f "${HOST_TOOLCHAIN}/bin/${bname}" ] && file "${file}" | grep -q 'ELF'; then
                  echo "Replacing ${bname}"
                  cp "${HOST_TOOLCHAIN}/bin/${bname}" "${file}"
              elif file "${file}" | grep -q 'Bourne-Again shell script'; then
                  echo "Replacing SheBang ${bname}"
                  sed -i 's,#!/usr/bin/env bash,#!/usr/bin/env sh,' "${file}"
              elif ! file "${file}" | grep -Eq 'Python script|Perl script|ASCII text'; then
                  echo "Removing ${bname}"
                  rm ${file}
              fi
          done

          # Fix "Unknown host CPU architecture" in some architectures
          sed -i -E '/case \$HOST_ARCH in/,/esac/ c\
          case $HOST_ARCH in\
            armv7l|armv8l) HOST_ARCH=arm;;\
            aarch64) HOST_ARCH=arm64;;\
            i?86) HOST_ARCH=x86;;\
            amd64) HOST_ARCH=x86_64;;\
            arm64|x86_64|riscv32|riscv64) HOST_ARCH=$HOST_ARCH;;\
            *) echo "ERROR: Unknown host CPU architecture: $HOST_ARCH"; exit 1;;\
          esac' "${NDK}/build/tools/ndk_bin_common.sh"

          # Remove unused resource
          rm -rf "${NDK_TOOLCHAIN}/bin/perf2bolt"
          rm -rf "${NDK_TOOLCHAIN}/python3"
          rm -rf "${NDK_TOOLCHAIN}/musl"
          rm -rf "${NDK}/prebuilt/linux_x86-64/bin/*asm"
          find "${NDK_TOOLCHAIN}/lib" -maxdepth 1 -mindepth 1 -not -name clang -exec rm -rf {} \;
          find "${NDK_TOOLCHAIN}" -maxdepth 5 -path "*/lib/clang/[0-9][0-9]/lib/*" -not -name linux -exec rm -rf {} \;

          # Copy compiled binaries
          cp -R "${HOST_TOOLCHAIN}/lib/clang" "${NDK_TOOLCHAIN}/lib"
          cp -R "${HOST_TOOLCHAIN}/lib/libear" "${NDK_TOOLCHAIN}/lib"
          cp -R "${HOST_TOOLCHAIN}/lib/libscanbuild" "${NDK_TOOLCHAIN}/lib"
          cp /home/runner/make-4.3/build/bin/make ${NDK}/prebuilt/linux-x86_64/bin
          cp /home/runner/yasm-1.3.0/build/bin/yasm ${NDK}/prebuilt/linux-x86_64/bin
          cp /home/runner/yasm-1.3.0/build/bin/yasm ${NDK_TOOLCHAIN}/bin
          cp /home/runner/yasm-1.3.0/build/bin/ytasm ${NDK}/prebuilt/linux-x86_64/bin
          cp /home/runner/yasm-1.3.0/build/bin/vsyasm ${NDK}/prebuilt/linux-x86_64/bin
          cp /home/runner/yasm-1.3.0/build/lib/libyasm.a ${NDK}/prebuilt/linux-x86_64/lib
          mkdir -p "${NDK_TOOLCHAIN}/python3/bin"
          mkdir -p "${NDK_TOOLCHAIN}/python3/lib"
          cp /home/runner/Python-3.12.3/python ${NDK_TOOLCHAIN}/python3/bin/python3
          cp -R /home/runner/Python-3.12.3/build/lib/python3.12 ${NDK_TOOLCHAIN}/python3/lib

          if [[ "${{ matrix.target }}" != "x86_64-linux-musl" ]]; then
            case "${{ matrix.target }}" in
              aarch64-linux-musl)   ARCH="linux-arm64" ;;
              arm-linux-musleabihf) ARCH="linux-arm" ;;
              x86-linux-musl)       ARCH="linux-x86" ;;
              riscv64-linux-musl)   ARCH="linux-riscv64" ;;
              riscv32-linux-musl)   ARCH="linux-riscv32" ;;
              *) echo "WARNING: Unknown target triple: ${{ matrix.target }}" && ARCH="linux-x86_64" ;;
            esac

            mv "${NDK}/prebuilt/linux-x86_64" "${NDK}/prebuilt/${ARCH}"
            mv "${NDK}/toolchains/llvm/prebuilt/linux-x86_64" "${NDK}/toolchains/llvm/prebuilt/${ARCH}"

            for file in \
                ${NDK}/ndk-gdb \
                ${NDK}/ndk-lldb \
                ${NDK}/ndk-stack \
                ${NDK}/ndk-which
            do
                sed -i "s|linux-x86_64|${ARCH}|g" $file
            done
          fi

          rm -rf ${NDK}/shader-tools # TODO: maybe build?

      - name: Archive
        run: tar -cf - android-ndk-r${{inputs.ndk_version}} | xz -T0 -9e --lzma2=dict=256MiB > android-ndk-r${{inputs.ndk_version}}-${{matrix.target}}.tar.xz

      - uses: actions/upload-artifact@v4
        with:
          name: android-ndk-r${{inputs.ndk_version}}-${{matrix.target}}
          path: android-ndk-r${{inputs.ndk_version}}-${{matrix.target}}.tar.xz

  release:
    needs: [make]
    name: Release
    permissions:
      contents: write
      actions: write
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true

    - name: Release
      uses: ncipollo/release-action@v1.15.0
      with:
        tag: "r${{inputs.ndk_version}}"
        artifacts: android-ndk-r${{inputs.ndk_version}}*
        allowUpdates: true
        replacesArtifacts: true
        body: |
          [action](${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}})
